---
import Layout from '../../layouts/Layout.astro';
import DiamondRating from '../../components/DiamondRating.astro';
import ReviewTags from '../../components/ReviewTags.astro';
import ReviewForm from '../../components/ReviewForm.astro';
import booksData from '../../../books.json';
import reviewsJson from '../../../reviews.json';

interface Book {
	id: string;
	title: string;
	author: string;
	genres: string[];
	description: string;
	url: string;
	status: string;
	addedAt: string;
	cover: string;
}

interface Category {
	id: string;
	name: string;
	books: Book[];
}

interface Review {
	id: string;
	bookId: string;
	bookTitle: string;
	comment: string;
	date: string;
	reviewerName: string;
	rating: 1 | 2 | 3;
	tags?: {
		purpose?: string[];
		complexity?: string[];
		format?: string[];
	};
}

// Generate static paths for all book slugs
export async function getStaticPaths() {
	const booksData = await import('../../../books.json');
	const categories = booksData.default.categories || booksData.categories;
	const allBooks = categories.flatMap(category => category.books);
	return allBooks.map(book => ({
		params: { slug: book.id }
	}));
}

const { categories } = booksData as { categories: Category[] };
const { reviews } = reviewsJson as { reviews: Review[] };

// Get book slug from URL
const { slug } = Astro.params;

// Find the book in all categories
const allBooks = categories.flatMap(category => category.books);
const book = allBooks.find(b => b.id === slug);

// If book not found, return 404
if (!book) {
	return {
		props: {},
		notFound: true
	};
}

// Get book's category
const bookCategory = categories.find(category => 
	category.books.some(b => b.id === book.id)
);

// Get related books (same category, excluding current book)
const relatedBooks = bookCategory?.books
	.filter(b => b.id !== book.id)
	.slice(0, 5) || [];

// Get reviews for this book
const bookReviews = reviews
	.filter(review => review.bookId === book.id)
	.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
---

<Layout title={`${book.title} - LITBOKS`}>
	<main class="container mx-auto px-4 py-8">
		<div class="max-w-4xl mx-auto">
			<!-- Book Header -->
			<div class="flex flex-col md:flex-row gap-8 mb-12">
				<!-- Book Cover -->
				<div class="w-full md:w-1/3">
					<img 
						src={`/covers/${book.cover}`}
						alt={book.title}
						class="w-full rounded-lg shadow-lg"
					/>
				</div>

				<!-- Book Info -->
				<div class="w-full md:w-2/3">
					<h1 class="text-3xl font-bold mb-2">{book.title}</h1>
					<p class="text-xl text-gray-600 mb-4">oleh {book.author}</p>
					
					<div class="flex flex-wrap gap-2 mb-6">
						{book.genres.map((genre) => (
							<a 
								href={`/genre/${genre.toLowerCase()}`}
								class="px-3 py-1 bg-gray-100 hover:bg-gray-200 rounded-full text-sm text-gray-700"
							>
								{genre}
							</a>
						))}
					</div>

					<div class="prose max-w-none mb-8">
						<p>{book.description}</p>
					</div>

					<a 
						href={book.url}
						target="_blank"
						rel="noopener noreferrer"
						class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700"
					>
						Baca Buku
					</a>
				</div>
			</div>

			<!-- Review Section -->
			<section class="mb-12">
				<h2 class="text-2xl font-bold mb-6">Ulasan</h2>
				
				<!-- Existing Reviews -->
				<div class="space-y-6 mb-8">
					{bookReviews.length === 0 ? (
						<div class="bg-white p-6 rounded-lg shadow-sm text-center">
							<p class="text-gray-500">
								Belum ada ulasan. <a 
									href="#review-form" 
									class="font-bold text-blue-600 hover:text-blue-700 transition-colors"
								>
									Tulis Ulasan Pertama
								</a>
							</p>
						</div>
					) : (
						bookReviews.map((review) => (
							<div class="bg-white p-6 rounded-lg shadow-sm">
								<div class="flex items-center gap-4 mb-3">
									<DiamondRating rating={review.rating} size="sm" />
									<span class="text-sm text-gray-500">
										{review.rating === 1 ? 'Berkualitas' : review.rating === 2 ? 'Sangat Berkualitas' : 'Premium'}
									</span>
								</div>
								<p class="text-gray-600 mb-4">{review.comment}</p>
								{review.tags && <ReviewTags tags={review.tags} size="sm" class="mb-4" />}
								<div class="flex items-center justify-between text-sm text-gray-500">
									<span>{review.reviewerName}</span>
									<time datetime={review.date}>
										{new Date(review.date).toLocaleDateString('id-ID', {
											year: 'numeric',
											month: 'long',
											day: 'numeric'
										})}
									</time>
								</div>
							</div>
						))
					)}
				</div>

				<!-- Review Form -->
				<div id="review-form" class="bg-white p-6 rounded-lg shadow-sm">
					<h3 class="text-lg font-semibold mb-4">Tulis Ulasan</h3>
					<ReviewForm bookId={book.id} />
				</div>
			</section>

			<!-- Related Books -->
			{relatedBooks.length > 0 && (
				<section>
					<h2 class="text-2xl font-bold mb-6">Buku Terkait</h2>
					<div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
						{relatedBooks.map((book) => (
							<a 
								href={`/buku/${book.id}`}
								class="block bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow"
							>
								<img 
									src={`/covers/${book.cover}`}
									alt={book.title}
									class="w-full aspect-[3/4] object-cover"
								/>
								<div class="p-4">
									<h3 class="font-semibold mb-1 line-clamp-2">{book.title}</h3>
									<p class="text-sm text-gray-600">{book.author}</p>
								</div>
							</a>
						))}
					</div>
				</section>
			)}
		</div>
	</main>
</Layout> 